DECLARE (arr, aux) ARRAY [1000] OF INTEGER;
DECLARE (mergeIt, leftIt, rightIt) INTEGER;

mergesort: PROCEDURE (first, last);
    IF first + 1 < last THEN
        mergesort(first, (first + last)/2);
        mergesort((first + last)/2 + 1, last);
        merge(first, (first + last)/2, (first + last)/2 + 1, last);
    ENDIF;
END mergesort;

merge: PROCEDURE (leftFirst, leftLast, rightFirst, rightLast);
    ~ Copia tudo pra aux primeiro
    leftIt = leftFirst;
    rightIt = rightLast;
    mergeIt = 0
    LOOP;
        EXITWHEN leftIt > leftLast || rightIt > rightLast;
        IF arr[leftIt] < arr[rightIt] THEN
            aux[mergeIt++] = arr[leftIt++];
        ELSE
            aux[mergeIt++] = arr[rightIt++];
        ENDIF;
    ENDLOOP;

    LOOP;
        EXITWHEN leftIt > leftLast;
        aux[mergeIt++] = arr[leftIt++];
    ENDLOOP;

    LOOP;
        EXITWHEN rightIt > rightLast;
        aux[mergeIt++] = arr[rightIt++];
    ENDLOOP;

    ~ Copia de aux para arr
    mergeIt = 0;
    leftIt = leftFirst;
    LOOP;
        EXITWHEN leftIt > rightLast;
        arr[leftIt++] = aux[mergeIt++];
    ENDLOOP;
END merge;

START;
    arr[0] = 4;
    arr[1] = 3;
    arr[2] = 1;
    arr[3] = 2;

    mergesort(0, 3);
END;
